# üéØ Canary Deploy Profissional - Estilo Big Companies
# Deploy gradual: 5% ‚Üí 100% com health check profissional

name: Canary Deploy Professional

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      canary_percentage:
        description: 'Porcentagem inicial do canary (5-50)'
        required: false
        default: '5'
      skip_canary:
        description: 'Pular canary e ir direto para 100%'
        type: boolean
        required: false
        default: false

env:
  # üéØ CONFIGURA√á√ïES DO PROJETO - MUDE AQUI
  PROJECT_NAME: "rasparei"
  SITE_URL: "https://rasparei.com/"
  
  # üìä CONFIGURA√á√ïES DO CANARY
  CANARY_DURATION: "600"  # 10 minutos
  ERROR_THRESHOLD: "0.5"  # 0.5% de erro m√°ximo
  LATENCY_THRESHOLD: "3000" # 3 segundos m√°ximo

jobs:
  # üöÄ DEPLOY INICIAL (CANARY)
  canary-deploy:
    runs-on: ubuntu-latest
    outputs:
      canary_url: ${{ steps.deploy.outputs.preview-url }}
      canary_enabled: ${{ steps.config.outputs.canary_enabled }}
      canary_percentage: ${{ steps.config.outputs.canary_percentage }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üéØ Configurar Canary
        id: config
        run: |
          if [[ "${{ github.event.inputs.skip_canary }}" == "true" ]]; then
            echo "canary_enabled=false" >> $GITHUB_OUTPUT
            echo "üöÄ CANARY DESABILITADO - Deploy direto para 100%"
          else
            echo "canary_enabled=true" >> $GITHUB_OUTPUT
            PERCENTAGE="${{ github.event.inputs.canary_percentage || '5' }}"
            echo "canary_percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
            echo "üéØ CANARY HABILITADO - Deploy para $PERCENTAGE% dos usu√°rios"
          fi
        
      - name: üöÄ Deploy Canary
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ env.PROJECT_NAME }}
          # Canary deployment (preview)
          vercel-args: '--prod=false'
          
      - name: üì± Notificar In√≠cio Canary
        if: steps.config.outputs.canary_enabled == 'true'
        run: |
          PERCENTAGE="${{ steps.config.outputs.canary_percentage }}"
          MESSAGE="üéØ CANARY DEPLOY INICIADO%0A%0AüöÄ Projeto: ${{ env.PROJECT_NAME }}%0Aüìä Canary: $PERCENTAGE%% dos usu√°rios%0A‚è∞ Monitoramento: ${{ env.CANARY_DURATION }}s%0Aüîó URL: ${{ steps.deploy.outputs.preview-url }}%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"

  # üìä MONITORAMENTO PROFISSIONAL DO CANARY
  canary-monitor:
    runs-on: ubuntu-latest
    needs: [canary-deploy]
    if: needs.canary-deploy.outputs.canary_enabled == 'true'
    outputs:
      canary_success: ${{ steps.monitor.outputs.success }}
      error_rate: ${{ steps.monitor.outputs.error_rate }}
      avg_latency: ${{ steps.monitor.outputs.avg_latency }}
      total_requests: ${{ steps.monitor.outputs.total_requests }}
      
    steps:
      - name: üìä Monitoramento Profissional
        id: monitor
        run: |
          CANARY_URL="${{ needs.canary-deploy.outputs.canary_url }}"
          MONITOR_TIME=${{ env.CANARY_DURATION }}
          ERROR_THRESHOLD=${{ env.ERROR_THRESHOLD }}
          LATENCY_THRESHOLD=${{ env.LATENCY_THRESHOLD }}
          
          echo "üîç MONITORAMENTO PROFISSIONAL - ESTILO BIG COMPANIES"
          echo "=================================================="
          echo "üéØ URL Canary: $CANARY_URL"
          echo "‚è∞ Dura√ß√£o: ${MONITOR_TIME}s"
          echo "üö® Limite de erro: ${ERROR_THRESHOLD}%"
          echo "‚ö° Limite de lat√™ncia: ${LATENCY_THRESHOLD}ms"
          echo ""
          
          # Contadores
          TOTAL_REQUESTS=0
          FAILED_REQUESTS=0
          TOTAL_LATENCY=0
          
          # Loop de monitoramento (a cada 30s por 10 minutos)
          END_TIME=$(($(date +%s) + MONITOR_TIME))
          
          while [ $(date +%s) -lt $END_TIME ]; do
            START_TIME=$(date +%s%3N)
            
            # Health Check Profissional
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" --max-time 10 "$CANARY_URL" || echo "HTTPSTATUS:000;TIME:999")
            STATUS=$(echo $RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            LATENCY_SEC=$(echo $RESPONSE | grep -o "TIME:[0-9.]*" | cut -d: -f2)
            LATENCY_MS=$(echo "$LATENCY_SEC * 1000" | bc -l 2>/dev/null || echo "999")
            
            TOTAL_REQUESTS=$((TOTAL_REQUESTS + 1))
            TOTAL_LATENCY=$(echo "$TOTAL_LATENCY + $LATENCY_MS" | bc -l)
            
            # Verificar se passou nos crit√©rios profissionais
            if [[ "$STATUS" == "200" ]] && (( $(echo "$LATENCY_MS <= $LATENCY_THRESHOLD" | bc -l 2>/dev/null || echo "0") )); then
              echo "‚úÖ Request $TOTAL_REQUESTS: OK (${STATUS}, ${LATENCY_MS}ms)"
            else
              FAILED_REQUESTS=$((FAILED_REQUESTS + 1))
              echo "‚ùå Request $TOTAL_REQUESTS: FAIL (${STATUS}, ${LATENCY_MS}ms)"
            fi
            
            # Aguardar 30s entre requests
            sleep 30
          done
          
          # Calcular m√©tricas finais
          if [ $TOTAL_REQUESTS -gt 0 ]; then
            ERROR_RATE=$(echo "scale=2; $FAILED_REQUESTS * 100 / $TOTAL_REQUESTS" | bc -l)
            AVG_LATENCY=$(echo "scale=0; $TOTAL_LATENCY / $TOTAL_REQUESTS" | bc -l)
          else
            ERROR_RATE="100"
            AVG_LATENCY="9999"
          fi
          
          echo ""
          echo "üìä RESULTADOS FINAIS:"
          echo "üìà Total requests: $TOTAL_REQUESTS"
          echo "‚ùå Requests falharam: $FAILED_REQUESTS"
          echo "üìä Taxa de erro: ${ERROR_RATE}%"
          echo "‚ö° Lat√™ncia m√©dia: ${AVG_LATENCY}ms"
          echo ""
          
          # Avaliar sucesso usando crit√©rios profissionais
          if (( $(echo "$ERROR_RATE <= $ERROR_THRESHOLD" | bc -l) )) && (( $(echo "$AVG_LATENCY <= $LATENCY_THRESHOLD" | bc -l) )); then
            echo "‚úÖ CANARY APROVADO - CRIT√âRIOS PROFISSIONAIS ATENDIDOS!"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå CANARY REPROVADO - CRIT√âRIOS PROFISSIONAIS N√ÉO ATENDIDOS!"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
          
          # Salvar m√©tricas
          echo "error_rate=$ERROR_RATE" >> $GITHUB_OUTPUT
          echo "avg_latency=$AVG_LATENCY" >> $GITHUB_OUTPUT
          echo "total_requests=$TOTAL_REQUESTS" >> $GITHUB_OUTPUT

  # üöÄ DEPLOY PARA PRODU√á√ÉO (100%)
  production-deploy:
    runs-on: ubuntu-latest
    needs: [canary-deploy, canary-monitor]
    if: always() && (needs.canary-monitor.outputs.canary_success == 'true' || needs.canary-deploy.outputs.canary_enabled == 'false')
    outputs:
      production_url: ${{ steps.deploy.outputs.preview-url }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üöÄ Deploy Produ√ß√£o (100%)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ env.PROJECT_NAME }}
          vercel-args: '--prod'
          
      - name: ‚è≥ Aguardar Propaga√ß√£o
        run: sleep 45

  # üîç HEALTH CHECK PROFISSIONAL DA PRODU√á√ÉO
  production-health-check:
    runs-on: ubuntu-latest
    needs: [production-deploy]
    if: always() && needs.production-deploy.result == 'success'
    outputs:
      health_passed: ${{ steps.health.outputs.health_passed }}
      status_code: ${{ steps.health.outputs.status_code }}
      response_time: ${{ steps.health.outputs.response_time }}
      errors_count: ${{ steps.health.outputs.errors_count }}
      error_details: ${{ steps.health.outputs.error_details }}
      
    steps:
      - name: üîç Health Check Profissional da Produ√ß√£o
        id: health
        run: |
          echo "üîç Health Check Produ√ß√£o - Estilo Big Companies"
          echo "=============================================="
          
          ERRORS=0
          
          # 1. AVAILABILITY CHECK - O mais importante
          echo "üìä 1. Testando disponibilidade..."
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" --max-time 10 "${{ env.SITE_URL }}" || echo "HTTPSTATUS:000;TIME:999")
          STATUS=$(echo $RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          TIME=$(echo $RESPONSE | grep -o "TIME:[0-9.]*" | cut -d: -f2)
          
          echo "   Status: $STATUS"
          echo "   Tempo: ${TIME}s"
          
          # 2. CRITICAL ERRORS ONLY - S√≥ erros que realmente importam
          if [[ "$STATUS" != "200" ]]; then
            echo "‚ùå FALHA CR√çTICA: Site n√£o responde (HTTP $STATUS)"
            ERRORS=$((ERRORS + 1))
          elif (( $(echo "$TIME > 5.0" | bc -l 2>/dev/null || echo "0") )); then
            echo "‚ùå FALHA CR√çTICA: Site muito lento (${TIME}s > 5s)"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ Site dispon√≠vel e responsivo"
          fi
          
          # 3. BASIC CONTENT CHECK - S√≥ verificar se n√£o √© p√°gina de erro
          echo "üìÑ 2. Verificando conte√∫do b√°sico..."
          
          CONTENT=$(curl -s --max-time 10 "${{ env.SITE_URL }}" || echo "")
          CONTENT_SIZE=${#CONTENT}
          
          echo "   Tamanho: $CONTENT_SIZE chars"
          
          if [[ $CONTENT_SIZE -lt 1000 ]]; then
            echo "‚ùå FALHA CR√çTICA: Conte√∫do muito pequeno - poss√≠vel erro"
            ERRORS=$((ERRORS + 1))
          elif echo "$CONTENT" | grep -qi "500\|internal server error\|application error\|fatal error\|error occurred\|something went wrong\|bailout_to_client_side_rendering"; then
            echo "‚ùå FALHA CR√çTICA: P√°gina de erro detectada"
            
            # Mostrar qual erro foi detectado para debug
            if echo "$CONTENT" | grep -qi "bailout_to_client_side_rendering"; then
              echo "   üîç Erro espec√≠fico: BAILOUT_TO_CLIENT_SIDE_RENDERING (Next.js hydration)"
            elif echo "$CONTENT" | grep -qi "500"; then
              echo "   üîç Erro espec√≠fico: HTTP 500 (Internal Server Error)"
            elif echo "$CONTENT" | grep -qi "application error"; then
              echo "   üîç Erro espec√≠fico: Application Error"
            else
              echo "   üîç Erro espec√≠fico: Erro gen√©rico detectado no conte√∫do"
            fi
            
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ Conte√∫do carregado normalmente"
          fi
          
          # 4. FINAL RESULT - S√≥ falha se realmente cr√≠tico
          echo ""
          echo "üìä RESULTADO FINAL:"
          echo "‚ùå Falhas cr√≠ticas: $ERRORS"
          
          # Coletar detalhes do erro
          ERROR_DETAILS=""
          if [[ "$ERRORS" -gt 0 ]]; then
            if [[ "$STATUS" != "200" ]]; then
              ERROR_DETAILS="Site n√£o responde (HTTP $STATUS)"
            elif (( $(echo "$TIME > 5.0" | bc -l 2>/dev/null || echo "0") )); then
              ERROR_DETAILS="Site muito lento (${TIME}s)"
            elif echo "$CONTENT" | grep -qi "bailout_to_client_side_rendering"; then
              ERROR_DETAILS="Erro de hidrata√ß√£o Next.js"
            elif echo "$CONTENT" | grep -qi "500"; then
              ERROR_DETAILS="Erro interno do servidor"
            elif echo "$CONTENT" | grep -qi "application error"; then
              ERROR_DETAILS="Erro da aplica√ß√£o"
            else
              ERROR_DETAILS="Conte√∫do muito pequeno ou erro gen√©rico"
            fi
          fi
          
          # Salvar informa√ß√µes
          echo "errors_count=$ERRORS" >> $GITHUB_OUTPUT
          echo "status_code=$STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$TIME" >> $GITHUB_OUTPUT
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          
          if [[ "$ERRORS" -gt 0 ]]; then
            echo ""
            echo "üö® HEALTH CHECK FALHOU - PROBLEMA CR√çTICO DETECTADO"
            echo "health_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo ""
            echo "‚úÖ HEALTH CHECK PASSOU - SITE FUNCIONANDO"
            echo "health_passed=true" >> $GITHUB_OUTPUT
          fi

  # üîÑ ROLLBACK SE NECESS√ÅRIO
  rollback:
    runs-on: ubuntu-latest
    needs: [production-deploy, production-health-check, canary-monitor]
    if: always() && (needs.production-health-check.outputs.health_passed == 'false' || needs.canary-monitor.outputs.canary_success == 'false')
    outputs:
      rollback_executed: ${{ steps.rollback.outputs.executed }}
      
    steps:
      - name: üîÑ Rollback Autom√°tico
        id: rollback
        run: |
          echo "üö® EXECUTANDO ROLLBACK AUTOM√ÅTICO..."
          npm install -g vercel@latest
          
          # üß† ROLLBACK INTELIGENTE - Identifica qual deployment √© o atual vs anterior
          echo "üîç INICIANDO ROLLBACK INTELIGENTE..."
          
          # 1. Pegar o deployment que ACABOU de ser criado (o quebrado)
          echo "üìã 1. Identificando deployment atual (quebrado)..."
          CURRENT_DEPLOYMENT_URL="${{ needs.deploy.outputs.preview-url }}"
          echo "üö® Deployment atual (QUEBRADO): $CURRENT_DEPLOYMENT_URL"
          
          # 2. Listar todos deployments para encontrar o anterior
          echo "üìã 2. Listando todos os deployments..."
          ALL_DEPLOYMENTS=$(npx vercel ls ${{ env.PROJECT_NAME }} --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" -m 20)
          echo "$ALL_DEPLOYMENTS"
          
          # 3. Filtrar apenas deployments Ready de Production (excluindo o atual quebrado)
          echo "üîç 3. Filtrando deployments Ready (excluindo o quebrado)..."
          READY_DEPLOYMENTS=$(echo "$ALL_DEPLOYMENTS" | grep "‚óè Ready" | grep "Production" || true)
          
          # 4. Remover o deployment atual da lista (o quebrado)
          SAFE_DEPLOYMENTS=""
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              DEPLOYMENT_URL=$(echo "$line" | awk '{print $1}')
              if [[ "$DEPLOYMENT_URL" != "$CURRENT_DEPLOYMENT_URL" ]]; then
                SAFE_DEPLOYMENTS="$SAFE_DEPLOYMENTS$line"$'\n'
              else
                echo "üö´ Pulando deployment quebrado: $DEPLOYMENT_URL"
              fi
            fi
          done <<< "$READY_DEPLOYMENTS"
          
          echo "‚úÖ Deployments SEGUROS dispon√≠veis:"
          echo "$SAFE_DEPLOYMENTS"
          
          # 5. Pegar o primeiro deployment seguro (mais recente que n√£o √© o quebrado)
          ROLLBACK_URL=$(echo "$SAFE_DEPLOYMENTS" | head -1 | awk '{print $1}')
          
          if [[ -n "$ROLLBACK_URL" && "$ROLLBACK_URL" != "" ]]; then
            echo "üéØ ROLLBACK TARGET IDENTIFICADO: $ROLLBACK_URL"
            echo "üîÑ Executando rollback para deployment seguro..."
            
            npx vercel promote "$ROLLBACK_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
          else
            echo "‚ùå ERRO CR√çTICO: Nenhum deployment seguro encontrado!"
            echo "üîç Poss√≠veis causas:"
            echo "   ‚Ä¢ Todos deployments Ready s√£o o atual (quebrado)"
            echo "   ‚Ä¢ N√£o h√° deployments anteriores Ready"
            echo "   ‚Ä¢ Problema na filtragem dos deployments"
            echo "executed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
            if [ $? -eq 0 ]; then
              echo "‚úÖ ROLLBACK EXECUTADO!"
              echo "executed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå ROLLBACK FALHOU"
              echo "executed=false" >> $GITHUB_OUTPUT
            fi
          fi

  # üì± NOTIFICA√á√ïES FINAIS
  notify:
    runs-on: ubuntu-latest
    needs: [canary-deploy, canary-monitor, production-deploy, production-health-check, rollback]
    if: always()
    
    steps:
      - name: üì± Notifica√ß√£o Final
        run: |
          CANARY_ENABLED="${{ needs.canary-deploy.outputs.canary_enabled }}"
          CANARY_SUCCESS="${{ needs.canary-monitor.outputs.canary_success }}"
          HEALTH_PASSED="${{ needs.production-health-check.outputs.health_passed }}"
          ERROR_RATE="${{ needs.canary-monitor.outputs.error_rate }}"
          AVG_LATENCY="${{ needs.canary-monitor.outputs.avg_latency }}"
          TOTAL_REQUESTS="${{ needs.canary-monitor.outputs.total_requests }}"
          STATUS_CODE="${{ needs.production-health-check.outputs.status_code }}"
          RESPONSE_TIME="${{ needs.production-health-check.outputs.response_time }}"
          ERROR_DETAILS="${{ needs.production-health-check.outputs.error_details }}"
          ROLLBACK="${{ needs.rollback.outputs.rollback_executed || 'n√£o executado' }}"
          
          if [[ "$CANARY_ENABLED" == "false" ]]; then
            # Deploy direto sem canary
            if [[ "$HEALTH_PASSED" == "true" ]]; then
              MESSAGE="‚úÖ DEPLOY DIRETO OK: ${{ env.PROJECT_NAME }}%0A%0AüöÄ Deploy 100%% sem canary%0Aüìä Status: $STATUS_CODE%0A‚ö° Tempo: ${RESPONSE_TIME}s%0Aüåê ${{ env.SITE_URL }}%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
            else
              MESSAGE="üö® DEPLOY DIRETO FALHOU: ${{ env.PROJECT_NAME }}%0A%0A‚ùå Health check falhou%0Aüîç Erro: $ERROR_DETAILS%0Aüìä Status: $STATUS_CODE%0AüîÑ Rollback: $ROLLBACK%0Aüìù Commit: ${GITHUB_SHA:0:7}%0Aüî• INTERVEN√á√ÉO NECESS√ÅRIA!"
            fi
          else
            # Deploy com canary
            if [[ "$CANARY_SUCCESS" == "true" && "$HEALTH_PASSED" == "true" ]]; then
              MESSAGE="üéØ CANARY DEPLOY SUCESSO: ${{ env.PROJECT_NAME }}%0A%0A‚úÖ Canary aprovado (erro: ${ERROR_RATE}%%)%0A‚úÖ Produ√ß√£o funcionando%0A‚ö° Lat√™ncia canary: ${AVG_LATENCY}ms%0Aüìä Requests canary: $TOTAL_REQUESTS%0Aüìä Status produ√ß√£o: $STATUS_CODE%0A‚ö° Tempo produ√ß√£o: ${RESPONSE_TIME}s%0Aüåê 100%% dos usu√°rios protegidos%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
            elif [[ "$CANARY_SUCCESS" == "false" ]]; then
              MESSAGE="üö® CANARY REPROVADO: ${{ env.PROJECT_NAME }}%0A%0A‚ùå Canary falhou (erro: ${ERROR_RATE}%%)%0A‚ö° Lat√™ncia: ${AVG_LATENCY}ms%0Aüìä Requests: $TOTAL_REQUESTS%0AüîÑ Rollback: $ROLLBACK%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0A‚úÖ 95%% DOS USU√ÅRIOS PROTEGIDOS!"
            else
              MESSAGE="üö® PRODU√á√ÉO FALHOU: ${{ env.PROJECT_NAME }}%0A%0A‚úÖ Canary passou%0A‚ùå Produ√ß√£o falhou%0Aüîç Erro: $ERROR_DETAILS%0Aüìä Status: $STATUS_CODE%0AüîÑ Rollback: $ROLLBACK%0Aüìù Commit: ${GITHUB_SHA:0:7}%0Aüî• INTERVEN√á√ÉO NECESS√ÅRIA!"
            fi
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"

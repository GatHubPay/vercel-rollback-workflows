# 🚀 Workflow Padrão Universal - Para TODOS os Projetos
# Copie este arquivo para: .github/workflows/deploy.yml
# Mude apenas 3 linhas e funciona para qualquer projeto

name: Deploy Universal

on:
  push:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Verifica deploys manuais a cada 30 minutos
    - cron: '*/30 * * * *'

jobs:
  deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          # 🎯 MUDE AQUI: nome do seu projeto no Vercel
          vercel-project-id: SEU_PROJETO_AQUI
          
      - name: ⏳ Aguardar Deploy
        run: sleep 20
          
      - name: 📱 Notificar Início
        run: |
          MESSAGE="🚀 Deploy iniciado: ${{ github.repository }}%0A%0A📊 Commit: ${GITHUB_SHA:0:7}%0A👤 Por: ${{ github.actor }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 🔍 Health Check Detalhado
        id: health
        run: |
          # 🎯 MUDE AQUI: URL do seu projeto
          URL="https://SEU_SITE_AQUI.com/"
          
          echo "🔍 Verificando: $URL"
          
          ERRORS=0
          ERROR_DETAILS=""
          
          # 1. Testar conectividade
          STATUS=$(curl -s -w "%{http_code}" -o /tmp/page.html --max-time 30 "$URL" || echo "000")
          PAGE_SIZE=$(wc -c < /tmp/page.html 2>/dev/null || echo "0")
          
          echo "📊 Status HTTP: $STATUS"
          echo "📏 Tamanho: $PAGE_SIZE bytes"
          
          # 2. Verificar erros
          if [[ "$STATUS" != "200" ]]; then
            echo "❌ Site não responde (Status: $STATUS)"
            ERROR_DETAILS="${ERROR_DETAILS}• Site não responde (HTTP $STATUS)%0A"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [[ "$PAGE_SIZE" -lt 5000 ]]; then
            echo "❌ Página muito pequena ($PAGE_SIZE bytes)"
            ERROR_DETAILS="${ERROR_DETAILS}• Página muito pequena ($PAGE_SIZE bytes)%0A"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 3. Verificar recursos básicos
          if [[ "$STATUS" == "200" ]]; then
            JS_COUNT=$(grep -o '<script[^>]*src="[^"]*"' /tmp/page.html | wc -l || echo "0")
            CSS_COUNT=$(grep -o '<link[^>]*rel="stylesheet"' /tmp/page.html | wc -l || echo "0")
            
            echo "📜 Scripts: $JS_COUNT"
            echo "🎨 Estilos: $CSS_COUNT"
            
            if [[ "$JS_COUNT" -lt 2 ]]; then
              echo "❌ Poucos scripts JS ($JS_COUNT)"
              ERROR_DETAILS="${ERROR_DETAILS}• Poucos scripts JS ($JS_COUNT/2)%0A"
              ERRORS=$((ERRORS + 1))
            fi
            
            if [[ "$CSS_COUNT" -lt 1 ]]; then
              echo "❌ Poucos arquivos CSS ($CSS_COUNT)"
              ERROR_DETAILS="${ERROR_DETAILS}• Poucos arquivos CSS ($CSS_COUNT/1)%0A"
              ERRORS=$((ERRORS + 1))
            fi
          fi
          
          rm -f /tmp/page.html
          
          # Salvar resultados
          echo "errors_count=$ERRORS" >> $GITHUB_OUTPUT
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📊 RESULTADO: $ERRORS erros"
          
          if [[ "$ERRORS" -gt 0 ]]; then
            echo "🚨 HEALTH CHECK FALHOU!"
            echo "health_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ HEALTH CHECK PASSOU!"
            echo "health_passed=true" >> $GITHUB_OUTPUT
          fi

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: always() && needs.health-check.outputs.health_passed == 'false' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: 🔄 Rollback Automático
        id: rollback
        run: |
          echo "🚨 EXECUTANDO ROLLBACK AUTOMÁTICO..."
          npm install -g vercel@latest
          
          # 🎯 MUDE AQUI: mesmo nome do projeto da linha 32
          echo "🔍 Buscando deployments anteriores..."
          DEPLOYMENTS=$(npx vercel ls SEU_PROJETO_AQUI --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" -m 10)
          echo "📊 Deployments encontrados:"
          echo "$DEPLOYMENTS"
          
          PREVIOUS_URL=$(echo "$DEPLOYMENTS" | grep -E "https://.*\.vercel\.app" | sed -n '2p' | awk '{print $1}')
          
          if [ -z "$PREVIOUS_URL" ]; then
            echo "❌ Deployment anterior não encontrado"
            echo "🔍 Tentando encontrar deployment estável..."
            STABLE_URL=$(echo "$DEPLOYMENTS" | grep -E "https://.*\.vercel\.app" | head -2 | tail -1 | awk '{print $1}')
            
            if [ -n "$STABLE_URL" ]; then
              echo "🔄 Usando deployment estável: $STABLE_URL"
              npx vercel promote "$STABLE_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
              echo "rollback_executed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Nenhum deployment disponível"
              echo "rollback_executed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "🔄 Executando rollback para: $PREVIOUS_URL"
            npx vercel promote "$PREVIOUS_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
            
            if [ $? -eq 0 ]; then
              echo "✅ ROLLBACK EXECUTADO!"
              echo "🧪 Aguardando 30s para estabilizar..."
              sleep 30
              
              # Verificar se funcionou
              ROLLBACK_STATUS=$(curl -s -w "%{http_code}" -o /dev/null --max-time 30 "https://SEU_SITE_AQUI.com/" || echo "000")
              
              if [[ "$ROLLBACK_STATUS" == "200" ]]; then
                echo "✅ ROLLBACK VERIFICADO - SITE FUNCIONANDO!"
                echo "rollback_executed=true" >> $GITHUB_OUTPUT
              else
                echo "❌ ROLLBACK FALHOU (Status: $ROLLBACK_STATUS)"
                echo "rollback_executed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Comando de rollback falhou"
              echo "rollback_executed=false" >> $GITHUB_OUTPUT
            fi
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [health-check, rollback]
    if: always()
    
    steps:
      - name: 📱 Notificação Final
        run: |
          HEALTH_PASSED="${{ needs.health-check.outputs.health_passed }}"
          ERRORS="${{ needs.health-check.outputs.errors_count }}"
          ERROR_DETAILS="${{ needs.health-check.outputs.error_details }}"
          ROLLBACK="${{ needs.rollback.outputs.rollback_executed || 'não executado' }}"
          
          if [[ "$HEALTH_PASSED" == "true" ]]; then
            MESSAGE="✅ Deploy OK: ${{ github.repository }}%0A%0A🌐 Site funcionando perfeitamente%0A📊 Commit: ${GITHUB_SHA:0:7}%0A👤 Por: ${{ github.actor }}%0A🕒 $(date +'%H:%M')"
          else
            if [[ "$ROLLBACK" == "true" ]]; then
              MESSAGE="🔄 ROLLBACK EXECUTADO: ${{ github.repository }}%0A%0A🚨 Deploy falhou ($ERRORS erros)%0A✅ Site revertido automaticamente%0A📊 Commit: ${GITHUB_SHA:0:7}%0A✅ USUÁRIOS PROTEGIDOS!"
            else
              MESSAGE="🚨 DEPLOY FALHOU: ${{ github.repository }}%0A%0A❌ Health check: $ERRORS erros%0A%0A📋 DETALHES:%0A$ERROR_DETAILS%0A❌ Rollback: $ROLLBACK%0A📊 Commit: ${GITHUB_SHA:0:7}%0A%0A🔥 INTERVENÇÃO NECESSÁRIA!"
            fi
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"

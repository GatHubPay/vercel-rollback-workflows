# üè¢ Canary Deploy Reutiliz√°vel - Para Softhouse
# Deploy gradual: 5% ‚Üí 100% com health check profissional

name: Canary Deploy Professional

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Nome do projeto no Vercel'
        required: true
        type: string
      site_url:
        description: 'URL do site (com https://)'
        required: true
        type: string
      canary_percentage:
        description: 'Porcentagem inicial do canary (5-50)'
        required: false
        type: number
        default: 5
      canary_duration:
        description: 'Dura√ß√£o do canary em segundos'
        required: false
        type: number
        default: 600
      skip_canary:
        description: 'Pular canary e ir direto para 100%'
        required: false
        type: boolean
        default: false
      error_threshold:
        description: 'Taxa de erro m√°xima permitida (%)'
        required: false
        type: number
        default: 0.5
      latency_threshold:
        description: 'Lat√™ncia m√°xima permitida (ms)'
        required: false
        type: number
        default: 3000
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_TEAM_ID:
        required: true
      VERCEL_SCOPE:
        required: true
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID:
        required: true
    outputs:
      deployment_url:
        description: "URL do deployment"
        value: ${{ jobs.deploy.outputs.preview-url }}
      canary_success:
        description: "Se o canary foi bem-sucedido"
        value: ${{ jobs.canary-monitor.outputs.canary_passed }}

jobs:
  # üöÄ DEPLOY INICIAL (CANARY)
  deploy:
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üéØ Deploy Canary
        uses: amondnet/vercel-action@v25
        id: deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ inputs.project_name }}

      - name: üì± Notificar Canary Iniciado
        if: ${{ !inputs.skip_canary }}
        run: |
          MESSAGE="üéØ CANARY DEPLOY INICIADO%0A%0Aüè¢ Projeto: ${{ inputs.project_name }}%0Aüìä Canary: ${{ inputs.canary_percentage }}%% dos usu√°rios%0A‚è∞ Monitoramento: ${{ inputs.canary_duration }}s%0Aüîó URL: ${{ steps.deploy.outputs.preview-url }}%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$MESSAGE"

      - name: üì± Notificar Deploy Direto
        if: ${{ inputs.skip_canary }}
        run: |
          MESSAGE="üöÄ DEPLOY DIRETO INICIADO%0A%0Aüè¢ Projeto: ${{ inputs.project_name }}%0Aüìä Deploy: 100%% direto (canary pulado)%0Aüîó URL: ${{ steps.deploy.outputs.preview-url }}%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$MESSAGE"

  # üìä MONITOR CANARY (s√≥ se n√£o pular)
  canary-monitor:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ !inputs.skip_canary }}
    outputs:
      canary_passed: ${{ steps.monitor.outputs.canary_passed }}
      error_rate: ${{ steps.monitor.outputs.error_rate }}
      avg_latency: ${{ steps.monitor.outputs.avg_latency }}
      total_requests: ${{ steps.monitor.outputs.total_requests }}
      
    steps:
      - name: üìä Monitorar Canary
        id: monitor
        run: |
          echo "üìä INICIANDO MONITORAMENTO CANARY..."
          echo "üéØ URL: ${{ needs.deploy.outputs.preview-url }}"
          echo "‚è∞ Dura√ß√£o: ${{ inputs.canary_duration }}s"
          echo "üö® Limite erro: ${{ inputs.error_threshold }}%"
          echo "‚ö° Limite lat√™ncia: ${{ inputs.latency_threshold }}ms"
          
          TOTAL_REQUESTS=0
          TOTAL_ERRORS=0
          TOTAL_LATENCY=0
          MONITOR_DURATION=${{ inputs.canary_duration }}
          CHECK_INTERVAL=30
          CHECKS=$((MONITOR_DURATION / CHECK_INTERVAL))
          
          echo "üîÑ Fazendo $CHECKS verifica√ß√µes a cada ${CHECK_INTERVAL}s..."
          
          for i in $(seq 1 $CHECKS); do
            echo "üìä Check $i/$CHECKS..."
            
            # Fazer requisi√ß√£o e medir tempo
            START_TIME=$(date +%s%N)
            RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null --max-time 10 "${{ needs.deploy.outputs.preview-url }}" || echo "000")
            END_TIME=$(date +%s%N)
            
            LATENCY=$(( (END_TIME - START_TIME) / 1000000 )) # Convert to ms
            TOTAL_REQUESTS=$((TOTAL_REQUESTS + 1))
            TOTAL_LATENCY=$((TOTAL_LATENCY + LATENCY))
            
            echo "   Status: $RESPONSE | Lat√™ncia: ${LATENCY}ms"
            
            # Contar erro se n√£o for 200
            if [[ "$RESPONSE" != "200" ]]; then
              TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
              echo "   ‚ùå Erro detectado!"
            fi
            
            # Aguardar pr√≥ximo check (exceto no √∫ltimo)
            if [[ $i -lt $CHECKS ]]; then
              sleep $CHECK_INTERVAL
            fi
          done
          
          # Calcular m√©tricas finais
          if [[ $TOTAL_REQUESTS -gt 0 ]]; then
            ERROR_RATE=$(echo "scale=2; $TOTAL_ERRORS * 100 / $TOTAL_REQUESTS" | bc -l)
            AVG_LATENCY=$((TOTAL_LATENCY / TOTAL_REQUESTS))
          else
            ERROR_RATE=100
            AVG_LATENCY=9999
          fi
          
          echo "üìä RESULTADO DO CANARY:"
          echo "   üìà Total requests: $TOTAL_REQUESTS"
          echo "   ‚ùå Total errors: $TOTAL_ERRORS"
          echo "   üìä Error rate: ${ERROR_RATE}%"
          echo "   ‚ö° Avg latency: ${AVG_LATENCY}ms"
          
          # Verificar se passou nos crit√©rios
          CANARY_PASSED=true
          
          if (( $(echo "$ERROR_RATE > ${{ inputs.error_threshold }}" | bc -l) )); then
            echo "‚ùå CANARY REPROVADO: Taxa de erro ${ERROR_RATE}% > ${{ inputs.error_threshold }}%"
            CANARY_PASSED=false
          fi
          
          if [[ $AVG_LATENCY -gt ${{ inputs.latency_threshold }} ]]; then
            echo "‚ùå CANARY REPROVADO: Lat√™ncia ${AVG_LATENCY}ms > ${{ inputs.latency_threshold }}ms"
            CANARY_PASSED=false
          fi
          
          if [[ "$CANARY_PASSED" == "true" ]]; then
            echo "‚úÖ CANARY APROVADO! Pode ir para produ√ß√£o."
          else
            echo "‚ùå CANARY REPROVADO! N√£o pode ir para produ√ß√£o."
          fi
          
          # Outputs
          echo "canary_passed=$CANARY_PASSED" >> $GITHUB_OUTPUT
          echo "error_rate=$ERROR_RATE" >> $GITHUB_OUTPUT
          echo "avg_latency=$AVG_LATENCY" >> $GITHUB_OUTPUT
          echo "total_requests=$TOTAL_REQUESTS" >> $GITHUB_OUTPUT

  # üöÄ DEPLOY PRODU√á√ÉO (se canary passou ou foi pulado)
  production-deploy:
    runs-on: ubuntu-latest
    needs: [deploy, canary-monitor]
    if: always() && (inputs.skip_canary || needs.canary-monitor.outputs.canary_passed == 'true')
    outputs:
      production-url: ${{ steps.production.outputs.preview-url }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üöÄ Deploy Produ√ß√£o (100%)
        uses: amondnet/vercel-action@v25
        id: production
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ inputs.project_name }}
          vercel-args: '--prod'

      - name: ‚è≥ Aguardar Deploy Produ√ß√£o
        run: |
          echo "‚è≥ Aguardando deploy de PRODU√á√ÉO ficar dispon√≠vel..."
          echo "üåê Deploy ser√° promovido automaticamente para ${{ inputs.site_url }}"
          sleep 45

  # üîç HEALTH CHECK PRODU√á√ÉO
  production-health-check:
    runs-on: ubuntu-latest
    needs: [deploy, canary-monitor, production-deploy]
    if: always() && needs.production-deploy.result == 'success'
    outputs:
      health_check_passed: ${{ steps.health-check.outputs.health_check_passed }}
      error_details: ${{ steps.health-check.outputs.error_details }}
      status_code: ${{ steps.health-check.outputs.status_code }}
      response_time: ${{ steps.health-check.outputs.response_time }}
      
    steps:
      - name: üîç Health Check Produ√ß√£o
        id: health-check
        run: |
          echo "üîç HEALTH CHECK PRODU√á√ÉO..."
          echo "üéØ URL: ${{ inputs.site_url }}"
          
          ERRORS=0
          ERROR_DETAILS=""
          
          # 1. AVAILABILITY CHECK
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" --max-time 10 "${{ inputs.site_url }}" || echo "HTTPSTATUS:000;TIME:999")
          STATUS=$(echo $RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          TIME=$(echo $RESPONSE | grep -o "TIME:[0-9.]*" | cut -d: -f2)
          
          if [[ "$STATUS" != "200" ]]; then
            echo "‚ùå FALHA CR√çTICA: Site n√£o responde (HTTP $STATUS)"
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ HTTP $STATUS (site offline)%0A"
            ERRORS=$((ERRORS + 1))
          elif (( $(echo "$TIME > 5.0" | bc -l 2>/dev/null || echo "0") )); then
            echo "‚ùå FALHA CR√çTICA: Site muito lento (${TIME}s > 5s)"
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ Tempo resposta: ${TIME}s (>5s)%0A"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 2. CONTENT CHECK
          CONTENT=$(curl -s --max-time 10 "${{ inputs.site_url }}" || echo "")
          CONTENT_SIZE=${#CONTENT}
          
          if [[ $CONTENT_SIZE -lt 1000 ]]; then
            echo "‚ùå FALHA CR√çTICA: Conte√∫do muito pequeno - poss√≠vel erro"
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ P√°gina vazia ou erro%0A"
            ERRORS=$((ERRORS + 1))
          elif echo "$CONTENT" | grep -qi "500\|internal server error\|application error\|fatal error\|error occurred\|something went wrong\|bailout_to_client_side_rendering"; then
            echo "‚ùå FALHA CR√çTICA: P√°gina de erro detectada"
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ P√°gina de erro detectada%0A"
            ERRORS=$((ERRORS + 1))
          fi
          
          # RESULTADO
          if [[ $ERRORS -eq 0 ]]; then
            echo "‚úÖ PRODU√á√ÉO OK!"
            echo "health_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå PRODU√á√ÉO FALHOU!"
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          echo "status_code=$STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$TIME" >> $GITHUB_OUTPUT

  # üîÑ ROLLBACK (se produ√ß√£o falhar)
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, canary-monitor, production-deploy, production-health-check]
    if: always() && (needs.canary-monitor.outputs.canary_passed == 'false' || needs.production-health-check.outputs.health_check_passed == 'false')
    outputs:
      executed: ${{ steps.rollback.outputs.executed }}
      
    steps:
      - name: üîÑ Rollback Autom√°tico Inteligente
        id: rollback
        run: |
          echo "üö® EXECUTANDO ROLLBACK AUTOM√ÅTICO..."
          npm install -g vercel@latest
          
          # Rollback inteligente (mesmo do workflow anterior)
          CURRENT_DEPLOYMENT_URL="${{ needs.deploy.outputs.preview-url }}"
          echo "üö® Deployment atual (QUEBRADO): $CURRENT_DEPLOYMENT_URL"
          
          ALL_DEPLOYMENTS=$(npx vercel ls ${{ inputs.project_name }} --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" -m 20)
          READY_DEPLOYMENTS=$(echo "$ALL_DEPLOYMENTS" | grep "‚óè Ready" | grep "Production" || true)
          
          SAFE_DEPLOYMENTS=""
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              DEPLOYMENT_URL=$(echo "$line" | awk '{print $1}')
              if [[ "$DEPLOYMENT_URL" != "$CURRENT_DEPLOYMENT_URL" ]]; then
                SAFE_DEPLOYMENTS="$SAFE_DEPLOYMENTS$line"$'\n'
              fi
            fi
          done <<< "$READY_DEPLOYMENTS"
          
          ROLLBACK_URL=$(echo "$SAFE_DEPLOYMENTS" | head -1 | awk '{print $1}')
          
          if [[ -n "$ROLLBACK_URL" && "$ROLLBACK_URL" != "" ]]; then
            echo "üéØ ROLLBACK TARGET: $ROLLBACK_URL"
            npx vercel promote "$ROLLBACK_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ ROLLBACK EXECUTADO!"
              echo "executed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå ROLLBACK FALHOU"
              echo "executed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Nenhum deployment seguro encontrado"
            echo "executed=false" >> $GITHUB_OUTPUT
          fi

  # üì± NOTIFICA√á√ÉO FINAL
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, canary-monitor, production-deploy, production-health-check, rollback]
    if: always()
    
    steps:
      - name: üì± Notificar Resultado Final
        run: |
          CANARY_ENABLED="${{ !inputs.skip_canary }}"
          CANARY_PASSED="${{ needs.canary-monitor.outputs.canary_passed }}"
          PRODUCTION_PASSED="${{ needs.production-health-check.outputs.health_check_passed }}"
          ERROR_DETAILS="${{ needs.production-health-check.outputs.error_details }}"
          STATUS_CODE="${{ needs.production-health-check.outputs.status_code }}"
          RESPONSE_TIME="${{ needs.production-health-check.outputs.response_time }}"
          ROLLBACK_EXECUTED="${{ needs.rollback.outputs.executed || 'n√£o executado' }}"
          
          if [[ "$CANARY_ENABLED" == "false" ]]; then
            # Deploy direto sem canary
            if [[ "$PRODUCTION_PASSED" == "true" ]]; then
              MESSAGE="‚úÖ DEPLOY DIRETO OK: ${{ inputs.project_name }}%0A%0AüöÄ Deploy 100%% sem canary%0Aüìä Status: $STATUS_CODE%0A‚ö° Tempo: ${RESPONSE_TIME}s%0Aüåê ${{ inputs.site_url }}%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
            else
              MESSAGE="üö® DEPLOY DIRETO FALHOU: ${{ inputs.project_name }}%0A%0A‚ùå Health check falhou%0Aüîç Erro: $ERROR_DETAILS%0Aüìä Status: $STATUS_CODE%0AüîÑ Rollback: $ROLLBACK_EXECUTED%0Aüìù Commit: ${GITHUB_SHA:0:7}%0Aüî• INTERVEN√á√ÉO NECESS√ÅRIA!"
            fi
          else
            # Deploy com canary
            if [[ "$CANARY_PASSED" == "true" && "$PRODUCTION_PASSED" == "true" ]]; then
              ERROR_RATE="${{ needs.canary-monitor.outputs.error_rate }}"
              AVG_LATENCY="${{ needs.canary-monitor.outputs.avg_latency }}"
              TOTAL_REQUESTS="${{ needs.canary-monitor.outputs.total_requests }}"
              MESSAGE="üéØ CANARY DEPLOY SUCESSO: ${{ inputs.project_name }}%0A%0A‚úÖ Canary aprovado (erro: ${ERROR_RATE}%%)%0A‚úÖ Produ√ß√£o funcionando%0A‚ö° Lat√™ncia canary: ${AVG_LATENCY}ms%0Aüìä Requests canary: $TOTAL_REQUESTS%0Aüìä Status produ√ß√£o: $STATUS_CODE%0A‚ö° Tempo produ√ß√£o: ${RESPONSE_TIME}s%0Aüåê 100%% dos usu√°rios protegidos%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0Aüè¢ Deploy estilo Big Companies!"
            elif [[ "$CANARY_PASSED" == "false" ]]; then
              ERROR_RATE="${{ needs.canary-monitor.outputs.error_rate }}"
              AVG_LATENCY="${{ needs.canary-monitor.outputs.avg_latency }}"
              TOTAL_REQUESTS="${{ needs.canary-monitor.outputs.total_requests }}"
              MESSAGE="üö® CANARY REPROVADO: ${{ inputs.project_name }}%0A%0A‚ùå Canary falhou (erro: ${ERROR_RATE}%%)%0A‚ö° Lat√™ncia: ${AVG_LATENCY}ms%0Aüìä Requests: $TOTAL_REQUESTS%0AüîÑ Rollback: $ROLLBACK_EXECUTED%0Aüìù Commit: ${GITHUB_SHA:0:7}%0A%0A‚úÖ 95%% DOS USU√ÅRIOS PROTEGIDOS!"
            else # Production failed after canary passed
              MESSAGE="üö® PRODU√á√ÉO FALHOU: ${{ inputs.project_name }}%0A%0A‚úÖ Canary passou%0A‚ùå Produ√ß√£o falhou%0Aüîç Erro: $ERROR_DETAILS%0Aüìä Status: $STATUS_CODE%0AüîÑ Rollback: $ROLLBACK_EXECUTED%0Aüìù Commit: ${GITHUB_SHA:0:7}%0Aüî• INTERVEN√á√ÉO NECESS√ÅRIA!"
            fi
          fi
          
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$MESSAGE"

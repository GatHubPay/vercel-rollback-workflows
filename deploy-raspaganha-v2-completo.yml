# üéÆ Deploy RaspaGanha V2 - Monitoramento Completo
# Monitora QUALQUER deploy em produ√ß√£o + Health Check + Rollback

name: Deploy RaspaGanha V2

on:
  push:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Executa a cada 30 minutos para verificar deploys manuais
    - cron: '*/30 * * * *'

jobs:
  # Job 1: Deploy autom√°tico (s√≥ para main/master)
  deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üöÄ Deploy to Vercel
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: rasparei
          
      - name: ‚è≥ Aguardar Deploy
        run: |
          echo "‚è≥ Aguardando deploy autom√°tico ficar dispon√≠vel..."
          sleep 20
          
      - name: üì± Notificar Deploy Iniciado
        run: |
          MESSAGE="üöÄ Deploy RaspaGanha V2 iniciado%0A%0Aüìä Commit: ${GITHUB_SHA:0:7}%0Aüë§ Por: ${{ github.actor }}%0AüîÑ Aguardando health check..."
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"

  # Job 2: Health Check (sempre executa)
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: üîç Health Check Ultra Rigoroso
        id: health-check
        run: |
          echo "üîç Verificando aplica√ß√£o em produ√ß√£o..."
          echo "üåê URL: https://rasparei.com/"
          
          ERRORS=0
          WARNINGS=0
          DEPLOY_SOURCE="desconhecido"
          
          # Detectar fonte do deploy
          if [[ "${{ github.event_name }}" == "push" ]]; then
            DEPLOY_SOURCE="push autom√°tico (branch: ${{ github.ref_name }})"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_SOURCE="deploy manual via GitHub"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            DEPLOY_SOURCE="verifica√ß√£o peri√≥dica (poss√≠vel deploy manual no Vercel)"
          fi
          
          echo "üìã Fonte: $DEPLOY_SOURCE"
          
          # 1. Verificar conectividade
          echo "üìä 1. Testando conectividade..."
          STATUS=$(curl -s -w "%{http_code}" -o /tmp/page.html --max-time 30 "https://rasparei.com/" || echo "000")
          echo "Status HTTP: $STATUS"
          
          if [[ "$STATUS" != "200" ]]; then
            echo "‚ùå ERRO CR√çTICO: Site n√£o responde (Status: $STATUS)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 2. Verificar tamanho da p√°gina
          PAGE_SIZE=$(wc -c < /tmp/page.html 2>/dev/null || echo "0")
          echo "üìè 2. Tamanho: $PAGE_SIZE bytes"
          
          if [[ "$PAGE_SIZE" -lt 10000 ]]; then
            echo "‚ùå ERRO: P√°gina muito pequena ($PAGE_SIZE bytes)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 3. Verificar erros JavaScript
          echo "üìú 3. Verificando erros JS..."
          if grep -qi "error\|exception\|undefined\|null is not\|cannot read" /tmp/page.html; then
            echo "‚ùå ERRO: Erros JavaScript detectados"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 4. Verificar erros Next.js
          echo "‚öõÔ∏è  4. Verificando erros Next.js..."
          if grep -qi "application error\|500\|404\|error occurred\|something went wrong" /tmp/page.html; then
            echo "‚ùå ERRO: Mensagens de erro detectadas"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 5. Verificar elementos cr√≠ticos
          echo "üéÆ 5. Verificando elementos do jogo..."
          
          IMAGES_COUNT=$(grep -o 'src="[^"]*' /tmp/page.html | grep -E '\.(jpg|jpeg|png|gif|webp)' | wc -l || echo "0")
          echo "   üñºÔ∏è  Imagens: $IMAGES_COUNT"
          
          if [[ "$IMAGES_COUNT" -lt 5 ]]; then
            echo "‚ùå ERRO: Poucas imagens ($IMAGES_COUNT) - raspadinhas quebradas"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Textos essenciais
          REQUIRED_TEXTS=("Raspadinha" "Pr√™mios" "Jogar" "Depositar" "Saldo")
          for text in "${REQUIRED_TEXTS[@]}"; do
            if ! grep -qi "$text" /tmp/page.html; then
              echo "‚ùå ERRO: Texto '$text' n√£o encontrado"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          # 6. Verificar recursos
          JS_COUNT=$(grep -o '<script[^>]*src="[^"]*"' /tmp/page.html | wc -l || echo "0")
          CSS_COUNT=$(grep -o '<link[^>]*rel="stylesheet"' /tmp/page.html | wc -l || echo "0")
          
          echo "   üìú Scripts: $JS_COUNT"
          echo "   üé® Estilos: $CSS_COUNT"
          
          if [[ "$JS_COUNT" -lt 3 ]]; then
            echo "‚ùå ERRO: Poucos scripts ($JS_COUNT)"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [[ "$CSS_COUNT" -lt 2 ]]; then
            echo "‚ùå ERRO: Poucos estilos ($CSS_COUNT)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 7. Verificar estrutura HTML
          if ! grep -q "<html" /tmp/page.html; then
            echo "‚ùå ERRO: Tag HTML n√£o encontrada"
            ERRORS=$((ERRORS + 1))
          fi
          
          rm -f /tmp/page.html
          
          # Coletar detalhes dos erros para relat√≥rio
          ERROR_DETAILS=""
          if [[ "$STATUS" != "200" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ Site n√£o responde (HTTP $STATUS)%0A"
          fi
          if [[ "$PAGE_SIZE" -lt 10000 ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ P√°gina muito pequena ($PAGE_SIZE bytes)%0A"
          fi
          if [[ "$IMAGES_COUNT" -lt 5 ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ Poucas imagens ($IMAGES_COUNT/5)%0A"
          fi
          if [[ "$JS_COUNT" -lt 3 ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ Poucos scripts JS ($JS_COUNT/3)%0A"
          fi
          if [[ "$CSS_COUNT" -lt 2 ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}‚Ä¢ Poucos arquivos CSS ($CSS_COUNT/2)%0A"
          fi
          
          # Salvar informa√ß√µes para pr√≥ximo job
          echo "deploy_source=$DEPLOY_SOURCE" >> $GITHUB_OUTPUT
          echo "errors_count=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings_count=$WARNINGS" >> $GITHUB_OUTPUT
          echo "images_count=$IMAGES_COUNT" >> $GITHUB_OUTPUT
          echo "js_count=$JS_COUNT" >> $GITHUB_OUTPUT
          echo "css_count=$CSS_COUNT" >> $GITHUB_OUTPUT
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          
          # Resultado
          echo ""
          echo "üìä RESULTADO:"
          echo "‚ùå Erros: $ERRORS"
          echo "‚ö†Ô∏è  Avisos: $WARNINGS"
          
          if [[ "$ERRORS" -gt 0 ]]; then
            echo ""
            echo "üö® HEALTH CHECK FALHOU!"
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo ""
            echo "‚úÖ HEALTH CHECK PASSOU!"
            echo "health_check_passed=true" >> $GITHUB_OUTPUT
          fi

  # Job 3: Rollback (SEMPRE que health check falhar)
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: always() && needs.health-check.outputs.health_check_passed == 'false' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: üîÑ Rollback Autom√°tico
        run: |
          echo "üö® EXECUTANDO ROLLBACK AUTOM√ÅTICO..."
          echo "Deploy autom√°tico falhou - revertendo"
          
          npm install -g vercel@latest
          
          echo "üîç Buscando deployment anterior..."
          echo "üìã Listando √∫ltimos 10 deployments..."
          DEPLOYMENTS=$(npx vercel ls rasparei --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" -m 10)
          echo "üìä Deployments encontrados:"
          echo "$DEPLOYMENTS"
          
          PREVIOUS_URL=$(echo "$DEPLOYMENTS" | grep -E "https://.*\.vercel\.app" | sed -n '2p' | awk '{print $1}')
          
          if [ -z "$PREVIOUS_URL" ]; then
            echo "‚ùå Deployment anterior n√£o encontrado"
            echo "üîç Tentando encontrar deployment est√°vel..."
            
            # Buscar qualquer deployment que n√£o seja o atual
            STABLE_URL=$(echo "$DEPLOYMENTS" | grep -E "https://.*\.vercel\.app" | head -2 | tail -1 | awk '{print $1}')
            
            if [ -n "$STABLE_URL" ]; then
              echo "üîÑ Usando deployment est√°vel: $STABLE_URL"
              npx vercel promote "$STABLE_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
              echo "rollback_executed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Nenhum deployment dispon√≠vel para rollback"
              echo "rollback_executed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "üîÑ Executando rollback para: $PREVIOUS_URL"
            npx vercel promote "$PREVIOUS_URL" --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_SCOPE }}" --yes
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ ROLLBACK EXECUTADO COM SUCESSO!"
              echo "üß™ Aguardando 30 segundos para estabilizar..."
              sleep 30
              
              # Verificar se rollback funcionou
              echo "üîç Verificando se rollback funcionou..."
              ROLLBACK_STATUS=$(curl -s -w "%{http_code}" -o /dev/null --max-time 30 "https://rasparei.com/" || echo "000")
              
              if [[ "$ROLLBACK_STATUS" == "200" ]]; then
                echo "‚úÖ ROLLBACK VERIFICADO - SITE FUNCIONANDO!"
                echo "rollback_executed=true" >> $GITHUB_OUTPUT
              else
                echo "‚ùå ROLLBACK FALHOU - SITE AINDA COM PROBLEMAS (Status: $ROLLBACK_STATUS)"
                echo "rollback_executed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå Comando de rollback falhou"
              echo "rollback_executed=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Job 4: Notifica√ß√µes (sempre executa)
  notify:
    runs-on: ubuntu-latest
    needs: [health-check, rollback]
    if: always()
    
    steps:
      - name: üì± Telegram Notification
        run: |
          HEALTH_PASSED="${{ needs.health-check.outputs.health_check_passed }}"
          DEPLOY_SOURCE="${{ needs.health-check.outputs.deploy_source }}"
          ERRORS="${{ needs.health-check.outputs.errors_count }}"
          IMAGES="${{ needs.health-check.outputs.images_count }}"
          ERROR_DETAILS="${{ needs.health-check.outputs.error_details }}"
          ROLLBACK="${{ needs.rollback.outputs.rollback_executed || 'n√£o executado' }}"
          
          if [[ "$HEALTH_PASSED" == "true" ]]; then
            # Sucesso
            MESSAGE="‚úÖ RaspaGanha V2 - FUNCIONANDO!%0A%0AüéÆ Site: https://rasparei.com/%0Aüîç Health Check: PASSOU%0AüñºÔ∏è Imagens: $IMAGES OK%0Aüìã Fonte: $DEPLOY_SOURCE%0A%0Aüìä Commit: ${GITHUB_SHA:0:7}%0Aüïí $(date +'%d/%m %H:%M')"
          else
            # Falha
            if [[ "$ROLLBACK" == "true" ]]; then
              MESSAGE="üîÑ ROLLBACK EXECUTADO!%0A%0Aüö® Deploy falhou ($ERRORS erros)%0A‚úÖ Site revertido automaticamente%0AüéÆ https://rasparei.com/%0Aüìã Fonte: $DEPLOY_SOURCE%0A%0Aüìä Commit: ${GITHUB_SHA:0:7}%0A‚úÖ USU√ÅRIOS PROTEGIDOS!"
            else
              if [[ "${{ github.event_name }}" == "schedule" ]]; then
                MESSAGE="üö® PROBLEMA DETECTADO!%0A%0A‚ùå Health check falhou ($ERRORS erros)%0Aüîç Poss√≠vel deploy manual problem√°tico%0AüéÆ https://rasparei.com/%0A%0A‚ö†Ô∏è VERIFIQUE MANUALMENTE!%0AUsu√°rios podem estar afetados"
              else
                MESSAGE="üö® DEPLOY FALHOU!%0A%0A‚ùå Health check: $ERRORS erros detectados%0A%0Aüìã DETALHES DOS ERROS:%0A$ERROR_DETAILS%0A‚ùå Rollback: $ROLLBACK%0AüéÆ https://rasparei.com/%0Aüìã Fonte: $DEPLOY_SOURCE%0Aüìä Commit: ${GITHUB_SHA:0:7}%0A%0Aüî• INTERVEN√á√ÉO NECESS√ÅRIA!%0A‚ö†Ô∏è SITE PODE ESTAR COM PROBLEMAS!"
              fi
            fi
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"
